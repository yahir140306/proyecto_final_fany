---
// ScrollAnimations.astro - Componente para animaciones de scroll usando ScrollReveal
---

<script>
  import ScrollReveal from "scrollreveal";

  // Función para inicializar animaciones de scroll
  function initScrollReveal() {
    try {
      // Asegurar que todos los elementos sean visibles por defecto antes de configurar ScrollReveal
      document.querySelectorAll('[class*="animate"]').forEach((el) => {
        const element = el as HTMLElement;
        element.style.visibility = "visible";
        element.style.opacity = "1";
      });

      // Configuración básica y segura de ScrollReveal
      const sr = ScrollReveal({
        distance: "50px",
        duration: 800,
        easing: "ease-in-out",
        reset: false,
        mobile: true,
        viewFactor: 0.2,
        cleanup: true,
        interval: 500, // 500ms de delay entre elementos
        beforeReveal: function (el) {
          (el as HTMLElement).style.visibility = "visible";
        },
        afterReveal: function (el) {
          (el as HTMLElement).style.visibility = "visible";
          (el as HTMLElement).style.opacity = "1";
        },
      });

      // Esperar un poco para asegurar que todos los elementos estén en el DOM
      setTimeout(() => {
        // Función para aplicar delays por contenedor/sección
        function applyDelaysByContainer() {
          // Para cada artículo o sección principal, reiniciar el contador de delay
          const containers = document.querySelectorAll(
            "article, section, .card-container, main > div"
          );

          containers.forEach((container) => {
            let delayCounter = 0;

            // Dentro de cada contenedor, aplicar delays secuenciales
            const elementsInContainer = container.querySelectorAll(
              ".card-animate, .title-animate, .scroll-animate, .scroll-stagger, .fade-animate, .scroll-animate-left, .scroll-animate-right, .scroll-animate-scale"
            );

            elementsInContainer.forEach((element) => {
              const el = element as HTMLElement;
              const classList = el.classList;

              if (classList.contains("card-animate")) {
                sr.reveal(el, {
                  origin: "bottom",
                  distance: "60px",
                  duration: 900,
                  scale: 0.9,
                  delay: delayCounter * 500,
                });
              } else if (classList.contains("title-animate")) {
                sr.reveal(el, {
                  origin: "top",
                  distance: "40px",
                  duration: 1000,
                  delay: delayCounter * 500,
                });
              } else if (classList.contains("scroll-animate")) {
                sr.reveal(el, {
                  origin: "bottom",
                  distance: "50px",
                  duration: 800,
                  delay: delayCounter * 500,
                });
              } else if (classList.contains("scroll-stagger")) {
                sr.reveal(el, {
                  origin: "bottom",
                  distance: "40px",
                  duration: 700,
                  delay: delayCounter * 500,
                });
              } else if (classList.contains("fade-animate")) {
                sr.reveal(el, {
                  distance: "0px",
                  duration: 800,
                  delay: delayCounter * 500,
                });
              } else if (classList.contains("scroll-animate-left")) {
                sr.reveal(el, {
                  origin: "left",
                  distance: "50px",
                  duration: 800,
                  delay: delayCounter * 500,
                });
              } else if (classList.contains("scroll-animate-right")) {
                sr.reveal(el, {
                  origin: "right",
                  distance: "50px",
                  duration: 800,
                  delay: delayCounter * 500,
                });
              } else if (classList.contains("scroll-animate-scale")) {
                sr.reveal(el, {
                  origin: "bottom",
                  distance: "30px",
                  duration: 800,
                  scale: 0.85,
                  delay: delayCounter * 500,
                });
              }

              delayCounter++;
            });
          });
        }

        // Aplicar delays por contenedor
        applyDelaysByContainer();

        // Para elementos que no están dentro de contenedores específicos, aplicar animación simple
        const orphanElements = document.querySelectorAll(
          "body > .card-animate, body > .title-animate, body > .scroll-animate, body > .scroll-stagger, body > .fade-animate"
        );
        orphanElements.forEach((element, index) => {
          const el = element as HTMLElement;
          sr.reveal(el, {
            origin: "bottom",
            distance: "50px",
            duration: 800,
            delay: index * 500,
          });
        });

        console.log("ScrollReveal inicializado correctamente");

        // Timeout de seguridad para asegurar visibilidad
        setTimeout(() => {
          document.querySelectorAll('[class*="animate"]').forEach((el) => {
            const element = el as HTMLElement;
            if (
              getComputedStyle(element).visibility === "hidden" ||
              getComputedStyle(element).opacity === "0"
            ) {
              element.style.visibility = "visible";
              element.style.opacity = "1";
              element.style.transform = "none";
            }
          });
        }, 2000);
      }, 300);
    } catch (error) {
      console.warn("Error al inicializar ScrollReveal:", error);
      // Fallback crítico: asegurar que todo sea visible
      document.querySelectorAll('[class*="animate"]').forEach((el) => {
        const element = el as HTMLElement;
        element.style.visibility = "visible";
        element.style.opacity = "1";
        element.style.transform = "none";
      });
    }
  }

  // Asegurar que ScrollReveal se inicialice correctamente
  if (typeof window !== "undefined") {
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initScrollReveal);
    } else {
      // El DOM ya está cargado
      initScrollReveal();
    }
  }
</script>
